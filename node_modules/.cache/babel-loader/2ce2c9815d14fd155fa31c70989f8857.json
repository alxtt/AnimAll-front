{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nexport const useSortedPosts = (posts, sort) => {\n  _s();\n\n  const sortedPosts = useMemo(() => {\n    if (sort) {\n      return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]));\n    }\n\n    return posts;\n  }, [sort, posts]);\n  return sortedPosts;\n};\n\n_s(useSortedPosts, \"JCOM6shKwCo6CttVuNVxaNMnTKM=\");\n\nexport const usePosts = (posts, sort, query) => {\n  _s2();\n\n  const sortedPosts = useSortedPosts(posts, sort);\n  const sortedAndSearchedPosts = useMemo(() => {\n    return sortedPosts.filter(post => post.title.toLowerCase().includes(query.toLowerCase()));\n  }, [query, sortedPosts]);\n  return sortedAndSearchedPosts;\n};\n\n_s2(usePosts, \"1Y9f2rPptY4OI22k1qpnp57b6n0=\", false, function () {\n  return [useSortedPosts];\n});","map":{"version":3,"sources":["C:/Users/User/Documents/AnimAll-react-sketch — копия/src/hooks/usePosts.js"],"names":["useMemo","useSortedPosts","posts","sort","sortedPosts","a","b","localeCompare","usePosts","query","sortedAndSearchedPosts","filter","post","title","toLowerCase","includes"],"mappings":";;;AAAA,SAAQA,OAAR,QAAsB,OAAtB;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAAA;;AAC3C,QAAMC,WAAW,GAAGJ,OAAO,CAAC,MAAM;AAC9B,QAAGG,IAAH,EAAS;AACL,aAAO,CAAC,GAAGD,KAAJ,EAAWC,IAAX,CAAgB,CAACE,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACF,IAAD,CAAD,CAAQI,aAAR,CAAsBD,CAAC,CAACH,IAAD,CAAvB,CAA1B,CAAP;AACH;;AACD,WAAOD,KAAP;AACH,GAL0B,EAKxB,CAACC,IAAD,EAAOD,KAAP,CALwB,CAA3B;AAOA,SAAOE,WAAP;AACH,CATM;;GAAMH,c;;AAWb,OAAO,MAAMO,QAAQ,GAAG,CAACN,KAAD,EAAQC,IAAR,EAAcM,KAAd,KAAwB;AAAA;;AAC5C,QAAML,WAAW,GAAGH,cAAc,CAACC,KAAD,EAAQC,IAAR,CAAlC;AAEA,QAAMO,sBAAsB,GAAGV,OAAO,CAAC,MAAM;AACzC,WAAOI,WAAW,CAACO,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACC,KAAL,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCN,KAAK,CAACK,WAAN,EAAlC,CAA3B,CAAP;AACH,GAFqC,EAEnC,CAACL,KAAD,EAAQL,WAAR,CAFmC,CAAtC;AAIA,SAAOM,sBAAP;AACH,CARM;;IAAMF,Q;UACWP,c","sourcesContent":["import {useMemo} from \"react\";\n\nexport const useSortedPosts = (posts, sort) => {\n    const sortedPosts = useMemo(() => {\n        if(sort) {\n            return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]))\n        }\n        return posts;\n    }, [sort, posts])\n\n    return sortedPosts;\n}\n\nexport const usePosts = (posts, sort, query) => {\n    const sortedPosts = useSortedPosts(posts, sort);\n\n    const sortedAndSearchedPosts = useMemo(() => {\n        return sortedPosts.filter(post => post.title.toLowerCase().includes(query.toLowerCase()))\n    }, [query, sortedPosts])\n\n    return sortedAndSearchedPosts;\n}\n"]},"metadata":{},"sourceType":"module"}